#!/usr/bin/env python3
"""Wrapper to execute ``chatgpt_cli`` as a module using the current Python interpreter."""

from __future__ import annotations

import os
from pathlib import Path
import sys
from typing import Dict, NoReturn


def main() -> NoReturn:
    """Run the package entry point relative to this wrapper.

    Emprega ``os.execvpe`` para substituir o processo atual por
    ``python -m chatgpt_cli``, eliminando overhead de criação de filho.
    Uma alternativa mais simples é um *wrapper* em ``sh`` com ``exec`` para
    ``python -m chatgpt_cli``, evitando inicializar o Python apenas para
    redirecionar o processo.
    """
    repo_root_env: str | None = os.environ.get("PREFIX_DIR")
    default_repo: Path = Path.home() / ".local" / "share" / "chatgpt-cli"
    repo_root: Path = Path(repo_root_env) if repo_root_env else default_repo
    os.chdir(repo_root)
    sys.path.insert(0, str(repo_root))
    env: Dict[str, str] = os.environ.copy()
    # Falha rápida se a chave não estiver configurada, orientando o usuário.
    if "OPENAI_API_KEY" not in env:
        try:
            from chatgpt_cli.secure_storage import KeyLocation, load_api_key

            env["OPENAI_API_KEY"] = load_api_key(loc=KeyLocation())
        except Exception:
            msg: str = (
                "Chave OpenAI ausente. Execute 'gpt_secure_setup.py' para configurá-la."
            )
            print(msg, file=sys.stderr)
            raise SystemExit(1)
    pythonpath: str = env.get("PYTHONPATH", "")
    env["PYTHONPATH"] = (
        f"{repo_root}{os.pathsep}{pythonpath}" if pythonpath else str(repo_root)
    )
    os.execvpe(sys.executable, [sys.executable, "-m", "chatgpt_cli", *sys.argv[1:]], env)


if __name__ == "__main__":
    main()
